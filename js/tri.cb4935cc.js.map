{"version":3,"file":"js/tri.cb4935cc.js","mappings":"mPAAA,g7L,mKCyBA,MAAMA,GAAQC,EAAAA,EAAAA,IAAI,UACZC,GAAYD,EAAAA,EAAAA,IAAI,CAAC,MAAO,iB,qWCvB9B,MAAME,EAAc,EAEpB,O,6ICLA,6vG,qKCyBA,MAAMH,GAAQC,EAAAA,EAAAA,IAAI,WACZC,GAAYD,EAAAA,EAAAA,IAAI,CAAC,MAAO,mB,qWCvB9B,MAAME,EAAc,EAEpB,O,6ICLA,6lE,sKCyBA,MAAMH,GAAQC,EAAAA,EAAAA,IAAI,WACZC,GAAYD,EAAAA,EAAAA,IAAI,CAAC,MAAO,oB,qWCvB9B,MAAME,EAAc,EAEpB,O","sources":["webpack://samdory-archive/./src/posts/tri/코드에디터.md","webpack://samdory-archive/./src/views/tri/TrainingCode.vue","webpack://samdory-archive/./src/views/tri/TrainingCode.vue?7de1","webpack://samdory-archive/./src/posts/tri/디자인플랫폼.md","webpack://samdory-archive/./src/views/tri/TrainingDesign.vue","webpack://samdory-archive/./src/views/tri/TrainingDesign.vue?0da5","webpack://samdory-archive/./src/posts/tri/프로젝트개념.md","webpack://samdory-archive/./src/views/tri/TrainingProject.vue","webpack://samdory-archive/./src/views/tri/TrainingProject.vue?3ffb"],"sourcesContent":["export default \"---\\r\\ntitle: Visual Studio Code 사용법 안내\\r\\ndate: 2024.06\\r\\n---\\r\\n\\r\\n본 문서는 웹 퍼블리싱 작업을 할 때 주로 사용하는 Visual Studio Code (VSCode) 관련 사용법을 설명하고자 합니다.\\r\\nVSCode 설치 방법, VSCode UI 설명, 작업 시 유용한 확장 프로그램, 주요 단축키 등 안내합니다.\\r\\n\\r\\n## 1. VSCode 설치\\r\\n\\r\\n### 설치 방법\\r\\n\\r\\n1. [Visual Studio Code 공식 사이트](https://code.visualstudio.com/download){:target=\\\"_blank\\\"}에 접속합니다.\\r\\n2. 자신의 운영체제에 맞는 설치 프로그램을 다운로드합니다.\\r\\n   - Windows: \\\"Download for Windows\\\"\\r\\n   - macOS: \\\"Download for macOS\\\"\\r\\n   - Linux: \\\"Download for Linux\\\"\\r\\n3. 다운로드한 설치 프로그램을 실행하여 설치를 완료합니다.\\r\\n\\r\\n### 설치 후 초기 설정\\r\\n\\r\\n1. 설치가 완료되면 VSCode를 실행합니다.\\r\\n2. 설치 후 처음 실행시 우측하단에 언어팩 설치 안내창 확인하여, 'Korean Language Pack' 언어팩을 설치합니다.\\r\\n\\r\\n> 언어팩 설치 안내가 없는 경우, 우측 사이드바에서 `확장 (Ctrl + Shift +X)` 열어서 'Korean Language Pack' 검색 후 설치 합니다.\\r\\n{:class=\\\"prompt-info\\\"}\\r\\n\\r\\n## 2. VSCode UI 설명\\r\\n\\r\\nVSCode의 기본 사용자 인터페이스(UI)는 다음과 같은 구성 요소로 이루어져 있습니다.\\r\\n\\r\\n### 기본 UI 구성 요소\\r\\n\\r\\n![VSCode UI 예시 이미지](@/assets/images/post/post_tri_code_01.png)   \\r\\n\\r\\n- **메뉴 바(Menu Bar)**\\r\\n    - 화면 상단에 위치하며, 파일, 편집, 보기, 이동, 실행, 터미널, 도움말 등의 메뉴를 포함하고 있습니다. 각 메뉴는 다양한 명령과 기능을 제공합니다.\\r\\n- **활동 표시줄(Activity Bar)**\\r\\n    - 화면 왼쪽에 위치하며, 파일 탐색기, 검색, 소스 제어, 디버그, 확장 등을 선택할 수 있습니다.\\r\\n- **사이드 바(Side Bar)**\\r\\n    - 활동 표시줄의 각 항목을 선택하면 해당 기능의 세부 내용을 표시합니다. 예를 들어, 파일 탐색기를 선택하면 열려 있는 폴더와 파일 목록이 표시됩니다.\\r\\n- **편집기(Editor)**\\r\\n    - 중앙에 위치하며, 코드를 작성하는 영역입니다. 여러 개의 파일을 동시에 열 수 있으며, 탭으로 구분됩니다.\\r\\n- **패널(Panel)**\\r\\n    - 화면 하단에 위치하며, 터미널, 디버그 콘솔, 출력, 문제 등을 표시합니다.\\r\\n- **상태 표시줄(Status Bar)**\\r\\n    - 화면 맨 아래에 위치하며, 현재 작업 중인 파일의 상태와 정보, 브랜치, 에러 및 경고 수 등을 표시합니다.\\r\\n\\r\\n\\r\\n## 3. 작업 시 유용한 확장 프로그램\\r\\n\\r\\n활동표시줄에 있는 `확장 (Ctrl + Shift +X)` 은 코드 작업시 효율성을 높여주기 위한 여러가지 기능들이 있습니다.\\r\\n그 중에서 주로 사용하는 확장에 대해 알려드리고자 합니다.\\r\\n\\r\\n\\r\\n![VSCode UI 예시 이미지](@/assets/images/post/post_tri_code_02.png)   \\r\\n\\r\\n### 확장프로그램 추천 목록\\r\\n\\r\\n<br>\\r\\n\\r\\n**01) HTML, CSS, JS 관련**\\r\\n- **HTML/CSS/JavaScript Snippets** [(link)](https://marketplace.visualstudio.com/items?itemName=Wscats.html-snippets){:target=\\\"_blank\\\"}\\r\\n    - HTML, CSS, JS 코드 작성 시 자동완성 도와주는 스니펫을 제공합니다.\\r\\n- **CSS Peek** [(link)](https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek){:target=\\\"_blank\\\"}\\r\\n    - 마크업에서 해당 클래스에 대한 CSS 정의를 쉽게 찾을 수 있습니다.\\r\\n    - 해당 클래스에 `Ctrl + 클릭` 하면 해당 스타일 정의 미리보기가 가능합니다.\\r\\n- **CSS Var Complete** [(link)](https://marketplace.visualstudio.com/items?itemName=phoenisx.cssvar){:target=\\\"_blank\\\"}\\r\\n    - 스타일 변수(var)에 대한 정의를 쉽게 찾을 수 있습니다.\\r\\n- **SCSS IntelliSense** [(link)](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-scss){:target=\\\"_blank\\\"}      \\r\\n    - SCSS에서 mixin 작업한 부분을 include 시 자동완성 및 prop 정의를 쉽게 찾을 수 있습니다. \\r\\n- **Live Sass Compiler** [(link)](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass){:target=\\\"_blank\\\"}      \\r\\n    - 작업한 scss를 자동으로 컴파일 해주는 기능입니다. 상태표시줄 우측에 `wacth Sass` 로 활성화 시킬 수 있습니다.\\r\\n    - `설정(Ctrl + [ , ])` 에 들어가서 'Live Sass Compile › Settings: Formats' 검색 후 settings.json 으로 포맷 변경이 가능합니다.\\r\\n```json\\r\\n{\\r\\n    // 기존내용 ...\\r\\n    \\\"liveSassCompile.settings.formats\\\": [    \\r\\n        {\\r\\n            \\\"format\\\": \\\"expanded\\\",\\r\\n            \\\"extensionName\\\": \\\".css\\\",\\r\\n            \\\"savePath\\\": \\\"src/assets/css\\\"\\r\\n        }\\r\\n    ],\\r\\n}\\r\\n```\\r\\n\\r\\n**02) 생산성 향상**\\r\\n- **Live Server** [(link)](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer){:target=\\\"_blank\\\"}\\r\\n    - 로컬 서버를 실행하여 실시간으로 변경 사항을 반영합니다.\\r\\n- **Live Preview** [(link)](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server){:target=\\\"_blank\\\"}\\r\\n    - vscode 내에서 직접 미리보기로 띄울 수 있습니다.\\r\\n    - 탭 우측에 `측면에서 미리보기 열기` 아이콘 누르면 미리보기 가능합니다.\\r\\n- **Path Intellisense** [(link)](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense){:target=\\\"_blank\\\"}\\r\\n    - 경로 자동 완성을 지원하여 파일을 쉽게 참조할 수 있습니다.\\r\\n- **Auto Close Tag** [(link)](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag){:target=\\\"_blank\\\"}\\r\\n    - 닫기 태그를 자동으로 지원해주는 기능입니다.\\r\\n\\r\\n\\r\\n**03) 가독성 향상**\\r\\n- **indent-rainbow** [(link)](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow){:target=\\\"_blank\\\"}\\r\\n    - 모든 코드에서의 들여쓰기(tab)를 라인색으로 제공합니다.\\r\\n- **SVG Gallery** [(link)](https://marketplace.visualstudio.com/items?itemName=developer2006.svg-gallery){:target=\\\"_blank\\\"}\\r\\n    - svg들어가 있는 폴더를 vscode에서 직접 우측클릭 `Open in SVG Gallery` 로 svg 이미지 미리보기 가능합니다.\\r\\n\\r\\n\\r\\n## 4. VSCode 단축키 모음\\r\\n\\r\\n### 작업시 주요 단축키 목록\\r\\n\\r\\n- **파일 관리**\\r\\n  - 새 파일 만들기: `Ctrl + N`\\r\\n  - 파일 열기: `Ctrl + O`\\r\\n  - 파일 저장: `Ctrl + S`\\r\\n  - 모두 저장: `Ctrl + K, S`\\r\\n\\r\\n- **편집**\\r\\n  - 복사: `Ctrl + C`\\r\\n  - 잘라내기: `Ctrl + X`\\r\\n  - 붙여넣기: `Ctrl + V`\\r\\n  - 실행 취소: `Ctrl + Z`\\r\\n  - 다시 실행: `Ctrl + Y`\\r\\n  - 전체 선택: `Ctrl + A`\\r\\n\\r\\n- **탐색**\\r\\n  - 파일 간 전환: `Ctrl + Tab`\\r\\n  - 파일 탐색기 열기/닫기: `Ctrl + B`\\r\\n  - 사이드바 전환: `Ctrl + Shift + E`\\r\\n\\r\\n- **검색 및 바꾸기**\\r\\n  - 프로젝트 내 파일 찾기 : `Ctrl + P`\\r\\n  - 전체 파일 내 검색: `Ctrl + Shift + F`\\r\\n  - 현재 파일 내 검색: `Ctrl + F`\\r\\n  - 바꾸기: `Ctrl + H`\\r\\n\\r\\n- **설정**\\r\\n  - 설정창 열기 : `Ctrl + [ , ]`\\r\\n  - 명령 팔레트 (setting, theme 등) : `Ctrl + shift + P`\\r\\n  - 터미널 : `Ctrl + [~]`\\r\\n\\r\\n- **코드작업**\\r\\n  - 주석처리 : `Ctrl + [/]`\\r\\n  - 사이즈조절 : `Ctrl + [+/-]`\\r\\n  - 자동정렬 : `Shift + Alt +F` or 전체선택 후 `Ctrl + K + F`\\r\\n  - 특정라인 이동 : `Ctrl + G`\\r\\n  - 한줄 복사 : 해당 line 에서 `Shift + Alt [↑,↓]` or `Ctrl + C / Ctrl + V`\\r\\n  - 한줄 이동 : 해당 line 에서 `Alt + [↑,↓]`\\r\\n  - 한줄 삭제 : 해당 line 에서 `Ctrl + Shift + K` or `Ctrl + X`\\r\\n  - 같은 단어 선택 : `Ctrl + D`\\r\\n  - 같은 단어 전체 : `Ctrl + Shift + L`\\r\\n  - 멀티 커서 : `Alt + 클릭` or `Ctrl + Alt + [↑,↓]`\\r\\n  - 자유롭게 드래그 : `Shift + Alt + 마우스드래그`\\r\\n  - 해당 함수(func) 정의문 이동 : 해당 function 드래그 후 `F12` or `Ctrl + 클릭`\\r\\n  - 해당 함수(func) 정의문 보기 : 해당 function 드래그 후 `Alt + F12`\\r\\n\\r\\n- **디버그**\\r\\n  - 디버그 시작/중지: `F5`\\r\\n  - 중단점 설정/해제: `F9`\\r\\n\\r\\n<br>**단축키 참고사이트 :** [**inpa.tistory.com**](https://inpa.tistory.com/entry/VS-Code-%E2%8F%B1%EF%B8%8F-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%A0%95%EB%A6%AC){:target=\\\"_blank\\\"}\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n위의 내용을 참고하여 VSCode를 효율적으로 활용하시기 바랍니다.\\r\\n\";","<template>\r\n    <div :class=\"['container', pageClass]\">\r\n        <div class=\"container-content\">\r\n            <PageTopSlot :title=\"title\" :pagePath=\"pageClass\" />\r\n\r\n            <div class=\"section-area row\">\r\n                <div class=\"inner-col col-1 posts\">\r\n                    <div class=\"lottie-banner\">\r\n                        <LottieLoader :lottieData=\"lottieJson\"/>\r\n                    </div>\r\n                    <PageMarkDown :loader=\"postMd\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive } from 'vue'\r\nimport PageTopSlot from '@/components/PageTopSlot.vue'\r\nimport PageMarkDown from '@/components/PageMarkDown.vue'\r\nimport LottieLoader from '@/components/LottieLoader.vue'\r\nimport lottieJson from '@/assets/js/lottie/lottieTri.json'\r\nimport postMd from '@/posts/tri/코드에디터.md' \r\n\r\nconst title = ref('코드 에디터')\r\nconst pageClass = ref(['tri', 'TrainingCode'])\r\n\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n","import script from \"./TrainingCode.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TrainingCode.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","export default \"---\\r\\ntitle: 디자인 플랫폼 사용법 안내\\r\\ndate: 2024.06\\r\\n---\\r\\n\\r\\n본 문서는 디자이너가 제공한 디자인 산출물을 보여주는 디자인 플랫폼에 대해 사용하는 방법을 설명합니다. 주로 사용하는 플랫폼은 두가지 입니다.\\r\\n\\r\\n1. **피그마 (Figma)**\\r\\n2. **제플린 (Zeplin)**\\r\\n\\r\\n피그마와 제플린의 UI 구성요소, 주요 기능, 유용한 팁 등을 안내합니다.\\r\\n\\r\\n## 1. Figma 안내\\r\\n\\r\\n![Figma 안내 이미지](@/assets/images/post/post_tri_design_01.png)   \\r\\n\\r\\n[Figma](https://www.figma.com/){:target=\\\"_blank\\\"}는 실시간 협업이 가능한 디자인 도구로, 웹 기반에서 디자인 산출물을 확인하고 협업할 수 있습니다. \\r\\n디자이너와 퍼블리셔가 동시에 작업 내용을 공유하고 피드백을 주고받을 수 있어 효율적입니다.\\r\\n\\r\\n### 주요 기능\\r\\n\\r\\n1. **실시간 협업**\\r\\n   - 여러 사용자가 동시에 한 프로젝트에 참여하여 실시간으로 작업 내용을 확인하고 피드백을 제공할 수 있습니다.\\r\\n\\r\\n2. **디자인 파일 공유**\\r\\n   - Figma 링크를 통해 디자인 파일을 쉽게 공유할 수 있으며, 퍼블리셔는 이를 통해 디자인 가이드를 확인할 수 있습니다.\\r\\n\\r\\n3. **버전 관리**\\r\\n   - 디자인의 다양한 버전을 관리하고, 필요 시 이전 버전의 내용을 확인할 수 있습니다.\\r\\n\\r\\n### Figma UI 구성 요소\\r\\n\\r\\n![Figma UI 구성 이미지](@/assets/images/post/post_tri_design_02.png)\\r\\n\\r\\n- **툴바(Toolbar)**\\r\\n    - 상단에 위치하며, 선택, 드로잉, 텍스트 등의 도구를 사용할 수 있습니다.\\r\\n- **캔버스(Canvas)**\\r\\n    - 중앙에 위치하며, 디자인 작업이 이루어지는 주요 공간입니다.\\r\\n- **레이어 패널(Layers Panel)**\\r\\n    - 좌측에 위치하며, 디자인의 레이어 구조를 보여줍니다.\\r\\n- **우측 패널(Right Panel)**\\r\\n    - 우측에 위치하며, 코멘트(Cooment), 속성(Properties), 내보내기(Export) 기능을 사용할 수 있습니다. \\r\\n\\r\\n### Figma 사용법\\r\\n\\r\\n<br>**1. 간격 & 스타일 속성 확인**\\r\\n\\r\\n- 스타일 : 캔버스 내 해당 레이어를 클릭 후 우측 패널에 `Properties` 탭을 클릭하면 해당 레이어의 스타일 속성 값을 확인할 수 있습니다.\\r\\n- 간격   : 클릭된 상태에서 `Alt` 키 누른채로 다른 레이어에 Hover 했을때 상대 레이어에 대한 간격 등 확인이 가능합니다.\\r\\n\\r\\n![Figma 사용법 간격&스타일 이미지](@/assets/images/post/post_tri_design_03.png)\\r\\n\\r\\n\\r\\n\\r\\n<br>**2. 이미지 다운로드**\\r\\n\\r\\n- 다운로드 하고자 하는 이미지를 클릭 후 우측 패널에 `Export` 탭 클릭하고, 원하는 배수 지정 후 [Export] 버튼을 클릭하면 원하는 이미지를 받을 수 있습니다.\\r\\n\\r\\n![Figma 사용법 Export 이미지](@/assets/images/post/post_tri_design_04.png)\\r\\n\\r\\n\\r\\n## 2. Zeplin 안내\\r\\n\\r\\n![Zeplin 안내 이미지](@/assets/images/post/post_tri_design_05.png)\\r\\n\\r\\n[Zeplin](https://zeplin.io/){:target=\\\"_blank\\\"}은 디자인과의 협업을 돕는 도구로, 디자인 파일을 퍼블리셔가 쉽게 이해하고 구현할 수 있도록 돕습니다. \\r\\n퍼블리셔는 Zeplin을 통해 디자인 사양을 명확하게 이해하고 구현할 수 있습니다.\\r\\n\\r\\n\\r\\n### 주요 기능\\r\\n\\r\\n1. **디자인 사양 제공**\\r\\n   - 디자인 요소의 치수, 색상, 글꼴 등 상세한 사양을 제공하여 퍼블리셔가 이를 정확하게 구현할 수 있습니다.\\r\\n\\r\\n2. **스타일 가이드 생성**\\r\\n   - 프로젝트의 전반적인 스타일 가이드를 따로 생성하여 일관된 디자인을 확인할 수 있습니다.\\r\\n\\r\\n3. **이전 버전 관리**\\r\\n   - Zeplin에서 디자인의 이전 버전과 현재 버전을 비교하여 변경 사항을 확인할 수 있습니다.\\r\\n\\r\\n### Zeplin UI 구성 요소\\r\\n\\r\\n![Zeplin UI 구성 이미지](@/assets/images/post/post_tri_design_06.png)\\r\\n\\r\\n- **툴바(Toolbar)**\\r\\n    - 상단에 위치하며, 주로 파일과 프로젝트의 주요 기능들을 빠르게 접근할 수 있도록 해줍니다.\\r\\n- **프로젝트 대시보드(Project Dashboard)**\\r\\n    - 중앙에 위치하며, 모든 프로젝트와 해당 화면을 보여줍니다.\\r\\n- **화면 리스트(Screen List)**\\r\\n    - 좌측에 위치하며, 프로젝트에 포함된 모든 화면을 나열합니다.\\r\\n- **우측 패널(Right Panel)**\\r\\n    - 우측에 위치하며, 해당 대시보드에 대한 여러 기능, 상태 등 확인하는 영역입니다.\\r\\n- **코멘트(Comment)**\\r\\n    - 해당 화면에 코멘트을 추가하여 실시간 소통할 수 있습니다.\\r\\n\\r\\n### Zeplin 사용법\\r\\n\\r\\n\\r\\n<br>**1. 간격 & 스타일 속성 확인**\\r\\n\\r\\n- 스타일 : 대시보드 내 해당 레이어를 클릭 후 우측 패널에서 코드블럭에서 레이어의 스타일 속성 값을 확인할 수 있습니다.\\r\\n- 간격   : 클릭된 상태에서 여백이나 다른 레이어에 Hover 했을때 간격 확인 가능합니다.\\r\\n\\r\\n![Zeplin 사용법 간격&스타일 이미지](@/assets/images/post/post_tri_design_07.png)\\r\\n\\r\\n\\r\\n<br>**2. 이미지 다운로드**\\r\\n\\r\\n- 다운로드 하고자 하는 이미지를 클릭 후 우측 패널에서 assets 측 필터버튼으로 이미지 배수 등 선택하여, 하단에 다운로드 버튼을 클릭하면 원하는 이미지를 받을 수 있습니다.\\r\\n\\r\\n![Zeplin 사용법 Export 이미지](@/assets/images/post/post_tri_design_08.png)\\r\\n\\r\\n---\\r\\n\\r\\n디자인과의 원활한 소통을 통해 더 나은 결과물을 만들어낼 수 있습니다.\\r\\n위의 내용을 참고하여 Figma와 Zeplin을 효율적으로 활용하시기 바랍니다. \";","<template>\r\n    <div :class=\"['container', pageClass]\">\r\n        <div class=\"container-content\">\r\n            <PageTopSlot :title=\"title\" :pagePath=\"pageClass\" />\r\n\r\n            <div class=\"section-area row\">\r\n                <div class=\"inner-col col-1 posts\">\r\n                    <div class=\"lottie-banner\">\r\n                        <LottieLoader :lottieData=\"lottieJson\"/>\r\n                    </div>\r\n                    <PageMarkDown :loader=\"postMd\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive } from 'vue'\r\nimport PageTopSlot from '@/components/PageTopSlot.vue'\r\nimport PageMarkDown from '@/components/PageMarkDown.vue'\r\nimport LottieLoader from '@/components/LottieLoader.vue'\r\nimport lottieJson from '@/assets/js/lottie/lottieTri.json'\r\nimport postMd from '@/posts/tri/디자인플랫폼.md' \r\n\r\nconst title = ref('디자인 플랫폼')\r\nconst pageClass = ref(['tri', 'TrainingDesign'])\r\n\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n","import script from \"./TrainingDesign.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TrainingDesign.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","export default \"---\\r\\ntitle: 프로젝트 개요 및 역할 안내\\r\\ndate: 2024.06\\r\\n---\\r\\n\\r\\n본 문서는 프로젝트 투입하기 전 개념에 대해 설명하고자 합니다.\\r\\n개요와 역할 분류, 그리고 프로젝트 투입 시 주의사항에 대해 안내합니다.\\r\\n아래 내용을 참고하여 프로젝트 진행에 도움이 되시길 바랍니다.\\r\\n\\r\\n## 1. 프로젝트 개요\\r\\n\\r\\n### 프로젝트의 정의\\r\\n- 프로젝트는 정보 기술을 활용하여 특정 목표를 달성하기 위해 수행되는 일련의 활동입니다.\\r\\n- 이러한 프로젝트는 UI/UX 활용한 사이트 구축, 운영 유지보수, 웹접근성 마크 획득 등 다양한 형태를 가질 수 있습니다.\\r\\n- 프로젝트는 명확한 목표, 일정, 예산을 가지고 있으며, 이를 달성하기 위해 팀원들이 협력하여 작업을 수행합니다.\\r\\n\\r\\n### 프로젝트의 중요성\\r\\n- 프로젝트는 명확한 목표와 계획을 통해 효율적인 관리와 품질 향상을 가능하게 합니다.\\r\\n- 프로젝트를 통해 신기술 도입 및 다양한 경험 축적으로 기술력을 향상시킬 수 있습니다.\\r\\n\\r\\n\\r\\n## 2. 프로젝트 역할 분류\\r\\n\\r\\n프로젝트에서는 다양한 역할이 필요하며, 각 역할은 특정 책임과 업무를 수행합니다. 아래는 프로젝트의 주요 역할 분류입니다.\\r\\n\\r\\n### 프로젝트 역할 구조\\r\\n\\r\\n![프로젝트 역할 구조 맵 이미지](@/assets/images/post/post_tri_pj_01.png)   \\r\\n\\r\\n**프로젝트 매니저 (PM) [Project Manager]**\\r\\n- 프로젝트의 전반적인 관리와 조율을 담당합니다.\\r\\n- 목표 설정, 일정 관리, 예산 관리, 팀원 조율 등을 수행합니다.\\r\\n\\r\\n**기획 PL (UX) [Project Leader]**\\r\\n- 사용자 경험(UX)을 고려한 기획을 담당합니다.\\r\\n- 사용자 요구사항 수집, 분석, 문서화를 통해 프로젝트의 방향을 설정합니다.\\r\\n\\r\\n**디자인 PL (UI) [Project Leader]**\\r\\n- 사용자 인터페이스(UI) 디자인을 담당합니다.\\r\\n- 시각적 디자인과 사용성 향상을 위해 UI 요소들을 설계합니다.\\r\\n\\r\\n**퍼블리싱 PL [Project Leader]**\\r\\n- 웹 퍼블리싱을 담당합니다.\\r\\n- HTML, CSS, JavaScript를 활용하여 웹 페이지를 구현하고 유지보수합니다.\\r\\n\\r\\n**개발 PL [Project Leader]**\\r\\n- 전반적인 개발을 담당합니다.\\r\\n- 백엔드(BE) 및 프론트엔드(FE) 개발, 데이터베이스 관리 등을 수행합니다.\\r\\n\\r\\n**플레이어 (PA) [Player]**\\r\\n- 각 PL의 지휘 아래 특정 업무를 수행하는 팀원들입니다.\\r\\n- 기획, 디자인, 퍼블리싱, 개발 등 각 분야에서 실무를 담당하여 수행합니다.\\r\\n\\r\\n## 3. 프로젝트 투입시 주의사항\\r\\n\\r\\n프로젝트에 투입될 때, 다음 사항을 유의하시기 바랍니다.\\r\\n<br>\\r\\n\\r\\n**역할과 책임 이해**\\r\\n- 자신의 역할과 책임을 명확히 이해하고, 이에 따라 업무를 수행해야 합니다.\\r\\n- 업무 관련 이슈 대응시 상급자나 PL에게 문의하여 명확히 해야 합니다.\\r\\n\\r\\n**커뮤니케이션**\\r\\n- 원활한 커뮤니케이션은 프로젝트 성공의 핵심입니다.\\r\\n- 정기적인 회의, 진행 상황 보고, 문제 발생 시 즉각적인 공유가 필요합니다.\\r\\n\\r\\n**일정 준수**\\r\\n- 프로젝트 일정은 반드시 준수해야 하며, 일정 내 업무를 완료하기 위해 노력해야 합니다.\\r\\n- 예상치 못한 지연이 발생할 경우, 즉시 PL에게 보고하여 대응 방안을 모색해야 합니다.\\r\\n\\r\\n**품질 관리**\\r\\n- 기획 설계와 디자인 결과물을 바탕으로 작업이 이루어져야 합니다.\\r\\n- 자신의 업무 결과물에 대해 높은 품질을 유지해야 합니다.\\r\\n- 코드 리뷰, 테스트, 피드백 수용 등 관리 절차를 준수해야 합니다.\\r\\n\\r\\n**산출물 관리**\\r\\n- 모든 작업에 대한 내용은 이후에 참조가 가능하도록 해야 합니다.\\r\\n- 수정 작업시 수정내역은 간단한 주석 처리로 수정날짜를 포함한 내용을 남기거나, 따로 기록을 남겨야 합니다.\\r\\n\\r\\n---\\r\\n\\r\\n프로젝트 파견 시 위의 내용을 숙지하시길 바랍니다.\\r\\n\";","<template>\r\n    <div :class=\"['container', pageClass]\">\r\n        <div class=\"container-content\">\r\n            <PageTopSlot :title=\"title\" :pagePath=\"pageClass\" />\r\n\r\n            <div class=\"section-area row\">\r\n                <div class=\"inner-col col-1 posts\">\r\n                    <div class=\"lottie-banner\">\r\n                        <LottieLoader :lottieData=\"lottieJson\"/>\r\n                    </div>\r\n                    <PageMarkDown :loader=\"postMd\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive } from 'vue'\r\nimport PageTopSlot from '@/components/PageTopSlot.vue'\r\nimport PageMarkDown from '@/components/PageMarkDown.vue'\r\nimport LottieLoader from '@/components/LottieLoader.vue'\r\nimport lottieJson from '@/assets/js/lottie/lottieTri.json'\r\nimport postMd from '@/posts/tri/프로젝트개념.md' \r\n\r\nconst title = ref('프로젝트 개념')\r\nconst pageClass = ref(['tri', 'TrainingProject'])\r\n\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n","import script from \"./TrainingProject.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TrainingProject.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["title","ref","pageClass","__exports__"],"sourceRoot":""}